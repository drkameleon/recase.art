;===============================================
; Recase.art
;
; Unicode-friendly string case converter
; for Arturo
;
; MIT License
; (c) 2024 Yanis Zafirópulos
;===============================================

;---------------------------
; Helpers
;---------------------------

_allCaps?: function [s][
    and? 1 < size s
         every? s 'ch -> or? [upper? ch]
                             [numeric? ch]
]

_separated: function [s][
    ; crazy regex credit:
    ; https://stackoverflow.com/a/62527131/1270812
    prepared: s | replace {/(*UTF8)([^[\p{L}\d]+|(?<=[\p{Ll}\d])(?=\p{Lu})|(?<=\p{Lu})(?=\p{Lu}[\p{Ll}\d])|(?<=[\p{L}\d])(?=\p{Lu}[\p{Ll}\d]))/} " "
                | split.words
    
    return map prepared 'word [
        (_allCaps? word)? -> word
                         -> lower word
    ]
]

;---------------------------
; Private methods
;---------------------------

_titleCase: function [s][
    join map _separated s => capitalize
]

_camelCase: function [s][
    join map.with:'i _separated s 'x [
        (i=0)? -> x
               -> capitalize x
    ]
]

_snakeCase: function [s][
    join.with:"_" _separated s
]

_kebabCase: function [s][
    join.with:"-" _separated s
]

;---------------------------
; Public methods
;---------------------------

recase: function [str :string][
    ret: str

    unless null? attr 'title -> ret: _titleCase ret
    unless null? attr 'camel -> ret: _camelCase ret
    unless null? attr 'snake -> ret: _snakeCase ret
    unless null? attr 'kebab -> ret: _kebabCase ret
    
    return ret
]

;---------------------------
; Testing
;---------------------------

if standalone? ::
    loop ["This is       an example", "ThisIsAnExample", "this345_is_an_example", "printSQL", "ДоброЈутро"] 'str [
        print ["String is:" str]
        print ["Separated:" join.with:", " separated str]
        print ["Camel case:" camelCase str]
        print ["Title case:" titleCase str]
        print ["Kebab case:" kebabCase str]
        print ["Snake case:" snakeCase str]
        print "----"
    ]